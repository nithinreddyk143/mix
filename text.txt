curl -X POST \
  'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  -d 'client_id=<client_id>&client_secret=<client_secret>&scope=https://graph.microsoft.com/.default&grant_type=client_credentials'


curl -X GET \
  'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/authorize?client_id=<client_id>&response_type=code&redirect_uri=<callback_url>&scope=https://graph.microsoft.com/.default'


*****************************


JENKINS_URL="http://your-jenkins-server-url"

# Jenkins username and password
USERNAME="your-jenkins-username"
PASSWORD="your-jenkins-password"

# String to search for in console logs
SEARCH_STRING="your-search-string"

# Get list of all jobs from Jenkins
JOBS=$(curl -s "${JENKINS_URL}/api/json?tree=jobs[name]" --user "${USERNAME}:${PASSWORD}" | jq -r '.jobs[].name')

# Iterate through each job and search its console log for the string
for JOB in $JOBS; do
    CONSOLE_LOG=$(curl -s "${JENKINS_URL}/job/${JOB}/lastBuild/consoleText" --user "${USERNAME}:${PASSWORD}")
    if echo "$CONSOLE_LOG" | grep -q "$SEARCH_STRING"; then
        echo "String found in job: $JOB"
    fi
done


*******************************************************************************************************************************

import hudson.model.*;
import hudson.util.*;
import jenkins.model.*;
import hudson.FilePath.FileCallable;
import hudson.slaves.OfflineCause;
import hudson.node_monitors.*;
import hudson.FilePath;
import hudson.model.*
import hudson.FilePath

def isAnyJobRunningOnAgent(agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    if (computer != null) {
        for (executor in computer.executors) {
            if (executor.isBusy()) {
                return true
            }
        }
    }
    return false
}

def listAndCleanFolderOnAgentsInLabels(labelNames) {
    def nodes = Jenkins.instance.getNodes()
    labelNames.each { labelName ->
        nodes.each { node ->
            if (node.getAssignedLabels().find { it.getName() == labelName }) {
                def agentName = node.getNodeName()
                if (!isAnyJobRunningOnAgent(agentName)) {
                    println "Listing contents of /data/gradle/caches on agent: $agentName"
                    def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, "/data/gradle/caches")
                    workspacePath.list().each { file ->
                        println file
                    }
                    println "Cleaning /data/gradle/caches folder on agent: $agentName"
                    workspacePath.deleteContents()
                } else {
                    println "Skipping cleaning on agent $agentName as a job is running on it"
                }
            }
        }
    }
}


def labelNames = ["oci_linux", "oci_linux_ol9"]
listAndCleanFolderOnAgentsInLabels(labelNames)
**************************************************************************************

simplified and generic groovy script to list and clean a folder in jenkins agents

import hudson.model.*
import hudson.FilePath

// Generic method to check if any job is running on an agent
def isAnyJobRunningOnAgent(String agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    return computer?.executors.any { it.isBusy() } // More concise check
}

// Generic method to list and clean a folder on an agent within a label
def listAndCleanFolderOnAgent(String agentName, String folderPath) {
    if (!isAnyJobRunningOnAgent(agentName)) {
        println "Listing contents of $folderPath on agent: $agentName"
        def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, folderPath)
        workspacePath.list().each { file -> println file }

        println "Cleaning $folderPath on agent: $agentName"
        workspacePath.deleteContents()
    } else {
        println "Skipping cleaning on agent $agentName as a job is running on it"
    }
}

// Main execution 
def listAndCleanFolderOnAgentsInLabels(List<String> labelNames, String folderPath) {
    Jenkins.instance.getNodes().each { node ->
        if (node.getAssignedLabels().any { it.getName() in labelNames }) {
            listAndCleanFolderOnAgent(node.getNodeName(), folderPath)
        }
    }
}

// Parameters for execution
def labelNames = ["oci_linux", "oci_linux_ol9"]
def folderPath = "/data/gradle/caches"

// Execute the process
listAndCleanFolderOnAgentsInLabels(labelNames, folderPath) 


-------------------------
try {
    def params = params // Directly use the params object in Pipeline
    println "labelNames: ${params.labelNames}"
    println "folderPath: ${params.folderPath}" 

    // Execute the process with parameters from Jenkins
    listAndCleanFolderOnAgentsInLabels(params.labelNames, params.folderPath) 
} catch (Exception e) {
    println "Error accessing or using parameters: ${e.message}"
} 


******************************************************************************************************

import hudson.model.Node
import hudson.model.Computer
import hudson.model.Label
import hudson.FilePath
import jenkins.model.Jenkins

pipeline {
    agent any
    
    stages {
        stage("Clone"){
            steps {
                git branch: 'ENGFRONT-1328_oci-agent-cache-cleanup', credentialsId: '134157d7-594d-4e8b-a893-e336e621e5c8', url: 'ssh://git@bitbucket.sits.avaloq.net/coin/jenkins-maintenance.git'
            }
        }
        
        stage('Check Agent is Occupied then List and clean') {
            steps {
                script {
                    def script = load 'groovy/agents-gradle-cache-cleanup.groovy'
        
                    def listAndCleanFolderOnAgentsInLabels = { labelNames ->
                        def isAnyJobRunningOnAgent = { agentName ->
                            def computer = Jenkins.instance.getComputer(agentName)
                            if (computer != null) {
                                for (executor in computer.executors) {
                                    if (executor.isBusy()) {
                                        return true
                                    }
                                }
                            }
                            return false
                        }
                        def nodes = Jenkins.instance.getNodes()
                        labelNames.each { labelName ->
                            nodes.each { node ->
                                if (node.getAssignedLabels().find { it.getName() == labelName }) {
                                    def agentName = node.getNodeName()
                                    if (!isAnyJobRunningOnAgent(agentName)) {
                                        echo "Listing contents of /data/gradle/caches on agent: $agentName"
                                        def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, "/data/gradle/caches")
                                        workspacePath.list().each { file ->
                                            echo file.getRemote() // Convert FilePath object to String
                                        }
                                        echo "Cleaning /data/gradle/caches folder on agent: $agentName"
                                        workspacePath.deleteContents()
                                    } else {
                                        echo "Skipping cleaning on agent $agentName as a job is running on it"
                                    }
                                }
                            }
                        }
                    }
                    def labelNames = ["oci_linux", "oci_linux_ol9"]
                    listAndCleanFolderOnAgentsInLabels(labelNames)
                }
            }
        }
    }
}
