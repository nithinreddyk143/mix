curl -X POST \
  'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  -d 'client_id=<client_id>&client_secret=<client_secret>&scope=https://graph.microsoft.com/.default&grant_type=client_credentials'


curl -X GET \
  'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/authorize?client_id=<client_id>&response_type=code&redirect_uri=<callback_url>&scope=https://graph.microsoft.com/.default'


*****************************


JENKINS_URL="http://your-jenkins-server-url"

# Jenkins username and password
USERNAME="your-jenkins-username"
PASSWORD="your-jenkins-password"

# String to search for in console logs
SEARCH_STRING="your-search-string"

# Get list of all jobs from Jenkins
JOBS=$(curl -s "${JENKINS_URL}/api/json?tree=jobs[name]" --user "${USERNAME}:${PASSWORD}" | jq -r '.jobs[].name')

# Iterate through each job and search its console log for the string
for JOB in $JOBS; do
    CONSOLE_LOG=$(curl -s "${JENKINS_URL}/job/${JOB}/lastBuild/consoleText" --user "${USERNAME}:${PASSWORD}")
    if echo "$CONSOLE_LOG" | grep -q "$SEARCH_STRING"; then
        echo "String found in job: $JOB"
    fi
done


*******************************************************************************************************************************

import hudson.model.*;
import hudson.util.*;
import jenkins.model.*;
import hudson.FilePath.FileCallable;
import hudson.slaves.OfflineCause;
import hudson.node_monitors.*;
import hudson.FilePath;
import hudson.model.*
import hudson.FilePath

def isAnyJobRunningOnAgent(agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    if (computer != null) {
        for (executor in computer.executors) {
            if (executor.isBusy()) {
                return true
            }
        }
    }
    return false
}

def listAndCleanFolderOnAgentsInLabels(labelNames) {
    def nodes = Jenkins.instance.getNodes()
    labelNames.each { labelName ->
        nodes.each { node ->
            if (node.getAssignedLabels().find { it.getName() == labelName }) {
                def agentName = node.getNodeName()
                if (!isAnyJobRunningOnAgent(agentName)) {
                    println "Listing contents of /data/gradle/caches on agent: $agentName"
                    def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, "/data/gradle/caches")
                    workspacePath.list().each { file ->
                        println file
                    }
                    println "Cleaning /data/gradle/caches folder on agent: $agentName"
                    workspacePath.deleteContents()
                } else {
                    println "Skipping cleaning on agent $agentName as a job is running on it"
                }
            }
        }
    }
}


def labelNames = ["oci_linux", "oci_linux_ol9"]
listAndCleanFolderOnAgentsInLabels(labelNames)
