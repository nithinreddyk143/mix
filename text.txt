curl -X POST \
  'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  -d 'client_id=<client_id>&client_secret=<client_secret>&scope=https://graph.microsoft.com/.default&grant_type=client_credentials'


curl -X GET \
  'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/authorize?client_id=<client_id>&response_type=code&redirect_uri=<callback_url>&scope=https://graph.microsoft.com/.default'


*****************************


JENKINS_URL="http://your-jenkins-server-url"

# Jenkins username and password
USERNAME="your-jenkins-username"
PASSWORD="your-jenkins-password"

# String to search for in console logs
SEARCH_STRING="your-search-string"

# Get list of all jobs from Jenkins
JOBS=$(curl -s "${JENKINS_URL}/api/json?tree=jobs[name]" --user "${USERNAME}:${PASSWORD}" | jq -r '.jobs[].name')

# Iterate through each job and search its console log for the string
for JOB in $JOBS; do
    CONSOLE_LOG=$(curl -s "${JENKINS_URL}/job/${JOB}/lastBuild/consoleText" --user "${USERNAME}:${PASSWORD}")
    if echo "$CONSOLE_LOG" | grep -q "$SEARCH_STRING"; then
        echo "String found in job: $JOB"
    fi
done


*******************************************************************************************************************************

import hudson.model.*;
import hudson.util.*;
import jenkins.model.*;
import hudson.FilePath.FileCallable;
import hudson.slaves.OfflineCause;
import hudson.node_monitors.*;
import hudson.FilePath;
import hudson.model.*
import hudson.FilePath

def isAnyJobRunningOnAgent(agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    if (computer != null) {
        for (executor in computer.executors) {
            if (executor.isBusy()) {
                return true
            }
        }
    }
    return false
}

def listAndCleanFolderOnAgentsInLabels(labelNames) {
    def nodes = Jenkins.instance.getNodes()
    labelNames.each { labelName ->
        nodes.each { node ->
            if (node.getAssignedLabels().find { it.getName() == labelName }) {
                def agentName = node.getNodeName()
                if (!isAnyJobRunningOnAgent(agentName)) {
                    println "Listing contents of /data/gradle/caches on agent: $agentName"
                    def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, "/data/gradle/caches")
                    workspacePath.list().each { file ->
                        println file
                    }
                    println "Cleaning /data/gradle/caches folder on agent: $agentName"
                    workspacePath.deleteContents()
                } else {
                    println "Skipping cleaning on agent $agentName as a job is running on it"
                }
            }
        }
    }
}


def labelNames = ["oci_linux", "oci_linux_ol9"]
listAndCleanFolderOnAgentsInLabels(labelNames)
**************************************************************************************

simplified and generic groovy script to list and clean a folder in jenkins agents

import hudson.model.*
import hudson.FilePath

// Generic method to check if any job is running on an agent
def isAnyJobRunningOnAgent(String agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    return computer?.executors.any { it.isBusy() } // More concise check
}

// Generic method to list and clean a folder on an agent within a label
def listAndCleanFolderOnAgent(String agentName, String folderPath) {
    if (!isAnyJobRunningOnAgent(agentName)) {
        println "Listing contents of $folderPath on agent: $agentName"
        def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, folderPath)
        workspacePath.list().each { file -> println file }

        println "Cleaning $folderPath on agent: $agentName"
        workspacePath.deleteContents()
    } else {
        println "Skipping cleaning on agent $agentName as a job is running on it"
    }
}

// Main execution 
def listAndCleanFolderOnAgentsInLabels(List<String> labelNames, String folderPath) {
    Jenkins.instance.getNodes().each { node ->
        if (node.getAssignedLabels().any { it.getName() in labelNames }) {
            listAndCleanFolderOnAgent(node.getNodeName(), folderPath)
        }
    }
}

// Parameters for execution
def labelNames = ["oci_linux", "oci_linux_ol9"]
def folderPath = "/data/gradle/caches"

// Execute the process
listAndCleanFolderOnAgentsInLabels(labelNames, folderPath) 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        def nodeName = node.getNodeName()
        def nodeClass = node.getClass().getName()
        if (!nodeName.startsWith("hudson.slaves.DumbSlave") && 
            !nodeClass.startsWith("hudson.slaves.DumbSlave")) {
            if (node.getAssignedLabels().any { it.getName() in labelNames }) {
                listAndCleanFolderOnAgent(nodeName, folderPath)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------
try {
    def params = params // Directly use the params object in Pipeline
    println "labelNames: ${params.labelNames}"
    println "folderPath: ${params.folderPath}" 

    // Execute the process with parameters from Jenkins
    listAndCleanFolderOnAgentsInLabels(params.labelNames, params.folderPath) 
} catch (Exception e) {
    println "Error accessing or using parameters: ${e.message}"
} 


******************************************************************************************************

import hudson.model.Node
import hudson.model.Computer
import hudson.model.Label
import hudson.FilePath
import jenkins.model.Jenkins

pipeline {
    agent any
    
    stages {
        stage("Clone"){
            steps {
                git branch: 'ENGFRONT-1328_oci-agent-cache-cleanup', credentialsId: '134157d7-594d-4e8b-a893-e336e621e5c8', url: 'ssh://git@bitbucket.sits.avaloq.net/coin/jenkins-maintenance.git'
            }
        }
        
        stage('Check Agent is Occupied then List and clean') {
            steps {
                script {
                    def script = load 'groovy/agents-gradle-cache-cleanup.groovy'
        
                    def listAndCleanFolderOnAgentsInLabels = { labelNames ->
                        def isAnyJobRunningOnAgent = { agentName ->
                            def computer = Jenkins.instance.getComputer(agentName)
                            if (computer != null) {
                                for (executor in computer.executors) {
                                    if (executor.isBusy()) {
                                        return true
                                    }
                                }
                            }
                            return false
                        }
                        def nodes = Jenkins.instance.getNodes()
                        labelNames.each { labelName ->
                            nodes.each { node ->
                                if (node.getAssignedLabels().find { it.getName() == labelName }) {
                                    def agentName = node.getNodeName()
                                    if (!isAnyJobRunningOnAgent(agentName)) {
                                        echo "Listing contents of /data/gradle/caches on agent: $agentName"
                                        def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, "/data/gradle/caches")
                                        workspacePath.list().each { file ->
                                            echo file.getRemote() // Convert FilePath object to String
                                        }
                                        echo "Cleaning /data/gradle/caches folder on agent: $agentName"
                                        workspacePath.deleteContents()
                                    } else {
                                        echo "Skipping cleaning on agent $agentName as a job is running on it"
                                    }
                                }
                            }
                        }
                    }
                    def labelNames = ["oci_linux", "oci_linux_ol9"]
                    listAndCleanFolderOnAgentsInLabels(labelNames)
                }
            }
        }
    }
}


-------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************

https://us06web.zoom.us/j/4875485862?pwd=QitpclhtZDlsNjJVSVM2SmNST0FqZz09

************************************************************************************



pipeline {
    agent any

    parameters {
        string(name: 'folderPath', defaultValue: '/data/gradle/caches', 
               description: 'Folder path to be cleaned on the agents.')  

        choice(name: 'labelNames', choices: ['oci_linux', 'oci_linux_ol9', /* Add more choices here */], 
               description: 'Select the agent labels to clean.') 
    }

    stages {
        stage('Clean Folders on Agents') {
            steps {
                script {
                    // Load your Groovy functions - Assuming it's in a file named 'sharedFunctions.groovy'
                    def sharedFunctions = load('sharedFunctions.groovy')

                    // Call your function using the parameters
                    sharedFunctions.listAndCleanFolderOnAgentsInLabels(params.labelNames, params.folderPath)
                }
            }
        }
    }
}

----------------------------------------


resource "azurerm_container_registry_webhook" "webhook" {
  name                = "my-webhook"
  container_registry_id = azurerm_container_registry.acr.id
  service_uri         = "https://example.com/webhook"
  actions             = ["push"]
}

----------------------------------------

resource "azurerm_monitor_metric_alert" "acr_alert" {
  name                = "acr-alert"
  resource_group_name = var.resource_group_name
  scopes              = [azurerm_container_registry.acr.id]

  # Define alert condition, action group, etc.
}

----------------------------------------------

resource "azurerm_container_registry" "acr" {
  name               = var.acr_name
  # Other properties...

  content_trust_policy {
    enabled = true
  }
}
---------------------------------------------


variable "webhook_name" {
  description = "Name of the webhook"
  type        = string
}

variable "webhook_service_uri" {
  description = "Service URI of the webhook"
  type        = string
}

variable "webhook_actions" {
  description = "Actions to trigger the webhook"
  type        = list(string)
}

variable "metric_alert_name" {
  description = "Name of the Azure Monitor Metric Alert"
  type        = string
}

variable "metric_alert_description" {
  description = "Description of the Azure Monitor Metric Alert"
  type        = string
}

variable "metric_alert_scope" {
  description = "Scope for the Azure Monitor Metric Alert"
  type        = string
}

variable "metric_alert_condition" {
  description = "Condition for the Azure Monitor Metric Alert"
  type        = string
}

variable "metric_alert_action_group_id" {
  description = "Action group ID for the Azure Monitor Metric Alert"
  type        = string
}

***********
output "webhook_id" {
  description = "ID of the created webhook"
  value       = azurerm_container_registry_webhook.webhook.id
}

output "metric_alert_id" {
  description = "ID of the created Azure Monitor Metric Alert"
  value       = azurerm_monitor_metric_alert.metric_alert.id
}
*************************************************************************

pipeline {
    agent any

    parameters {
        string(name: 'folderPath', defaultValue: '/data/gradle/caches', 
               description: 'Folder path to be cleaned on the agents.')  

        choice(name: 'labelNames', choices: ['oci_linux', 'oci_linux_ol9'], 
               description: 'Select the agent labels to clean.') 
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'ENGFRONT-1328_oci-agent-cache-cleanup', credentialsId: '134157d7-594d-4e8b-a893-e336e621e5c8', url: 'ssh://git@bitbucket.sits.avaloq.net/coin/jenkins-maintenance.git'
            }
        }

        stage('Clean Folders on Agents') {
            steps {
                script {
                    def sharedFunction = load('groovy/agents-gradle-cache-cleanup.groovy')
                    sharedFunction.listAndCleanFolderOnAgentsInLabels(params.labelNames, params.folderPath)
                }
            }
        }
    }
}

hudson.remoting.ProxyException: groovy.lang.MissingMethodException: No signature of method: java.util.ArrayList.listAndCleanFolderOnAgentsInLabels() is applicable for argument types: (java.lang.String, java.lang.String) values: [oci_linux_ol9, /data/gradle/caches]


*********************************

terrafrom modules:

Variables.tf

variable "resource_group_name" {
  description = "The name of the resource group in which to create the storage account."
  type        = string
}

variable "location" {
  description = "The location/region where the storage account will be created."
  type        = string
}

variable "storage_account_name" {
  description = "The name of the storage account."
  type        = string
  default     = "mystorageaccount"
}

variable "account_tier" {
  description = "The storage account tier."
  type        = string
  default     = "Standard"
}

variable "account_replication_type" {
  description = "The type of replication to use for this storage account."
  type        = string
  default     = "LRS"
}


main.tf

provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "example" {
  name     = var.resource_group_name
  location = var.location
}

resource "azurerm_storage_account" "example" {
  name                     = var.storage_account_name
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  account_tier             = var.account_tier
  account_replication_type = var.account_replication_type
}


Outputs.tf

output "storage_account_id" {
  description = "The ID of the created storage account."
  value       = azurerm_storage_account.example.id
}

output "primary_blob_endpoint" {
  description = "The primary endpoint URL for Blob storage in the storage account."
  value       = azurerm_storage_account.example.primary_blob_endpoint
}


Static web:

variables.tf
variable "resource_group_name" {
  description = "The name of the resource group in which to create the storage account."
  type        = string
}

variable "location" {
  description = "The location/region where the storage account will be created."
  type        = string
}

variable "storage_account_name" {
  description = "The name of the storage account."
  type        = string
  default     = "mystorageaccount"
}

variable "account_tier" {
  description = "The storage account tier."
  type        = string
  default     = "Standard"
}

variable "account_replication_type" {
  description = "The type of replication to use for this storage account."
  type        = string
  default     = "LRS"
}

variable "index_document" {
  description = "The name of the index document for the static website."
  type        = string
  default     = "index.html"
}

variable "error_404_document" {
  description = "The name of the error document for 404 errors."
  type        = string
  default     = "404.html"
}

main.tf
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "example" {
  name     = var.resource_group_name
  location = var.location
}

resource "azurerm_storage_account" "example" {
  name                     = var.storage_account_name
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  account_tier             = var.account_tier
  account_replication_type = var.account_replication_type

  static_website {
    index_document               = var.index_document
    error_404_document           = var.error_404_document
  }
}

outputs.tf

output "storage_account_id" {
  description = "The ID of the created storage account."
  value       = azurerm_storage_account.example.id
}

output "primary_blob_endpoint" {
  description = "The primary endpoint URL for Blob storage in the storage account."
  value       = azurerm_storage_account.example.primary_blob_endpoint
}

output "website_endpoint" {
  description = "The primary endpoint URL for the static website."
  value       = azurerm_storage_account.example.primary_web_endpoint
}


AKs nodepool:

variables.tf
variable "resource_group_name" {
  description = "The name of the resource group in which to create the AKS cluster."
  type        = string
}

variable "cluster_name" {
  description = "The name of the AKS cluster."
  type        = string
}

variable "node_pool_name" {
  description = "The name of the node pool."
  type        = string
}

variable "node_count" {
  description = "The initial number of nodes in the node pool."
  type        = number
}

variable "node_vm_size" {
  description = "The size of the Virtual Machine to be used as nodes in the pool."
  type        = string
}

variable "kubernetes_version" {
  description = "The version of Kubernetes to use for the node pool."
  type        = string
}

variable "os_disk_size_gb" {
  description = "The disk size (in GB) of the OS disk for each node in the pool."
  type        = number
}

main.tf
provider "azurerm" {
  features {}
}

resource "azurerm_kubernetes_cluster" "example" {
  name                = var.cluster_name
  location            = var.location
  resource_group_name = var.resource_group_name
  dns_prefix          = "example-aks"
  kubernetes_version  = var.kubernetes_version

  default_node_pool {
    name            = var.node_pool_name
    node_count      = var.node_count
    vm_size         = var.node_vm_size
    os_disk_size_gb = var.os_disk_size_gb
  }
}


outputs.tf

output "node_pool_name" {
  description = "The name of the node pool."
  value       = azurerm_kubernetes_cluster.example.default_node_pool[0].name
}

output "node_count" {
  description = "The current number of nodes in the node pool."
  value       = azurerm_kubernetes_cluster.example.default_node_pool[0].node_count
}

output "node_vm_size" {
  description = "The size of the Virtual Machine used as nodes in the pool."
  value       = azurerm_kubernetes_cluster.example.default_node_pool[0].vm_size
}


*******************************88
#!/usr/bin/env groovy
import hudson.model.Node
import hudson.model.Computer
import hudson.model.Label
import hudson.FilePath
import jenkins.model.Jenkins

// Metrics initialization
def totalCleanedCaches = 0
def totalAgentsProcessed = 0

// Method to check if any job is running on an agent
def isAnyJobRunningOnAgent(String agentName) {
   def computer = Jenkins.instance.getComputer(agentName)
   return computer?.executors.any { it.isBusy() } 
}

// Method to list and clean a folder on an agent within a label
def listAndCleanFolderOnAgent(String agentName, String folderPath) {
   if (!isAnyJobRunningOnAgent(agentName)) {
       println "Listing contents of $folderPath on agent: $agentName"
       def folderToClean = new FilePath(Jenkins.instance.getComputer(agentName).channel, folderPath)
       def files = folderToClean.list()
       if (!files.isEmpty()) {
           println "Cleaning $folderPath on agent: $agentName"
           folderToClean.deleteContents()
           totalCleanedCaches += files.size()
       } else {
           println "No files found in $folderPath on agent: $agentName"
       }
       totalAgentsProcessed++
   } else {
       println "Skipping cleaning on agent $agentName as a job is running on it"
   }
}

// Main execution 
def listAndCleanFolderOnAgentsInLabels(String labelNames, String folderPath) {
    List<String> labels = labelNames.split(',')
   Jenkins.instance.getNodes().each { node ->
       if (node.getAssignedLabels().any { it.getName() in labelNames }) {
           listAndCleanFolderOnAgent(node.getNodeName(), folderPath)
       }
   }
   println "Cleaned $totalCleanedCaches Gradle caches from $totalAgentsProcessed agents."
   return this
}

// Execute the process
listAndCleanFolderOnAgentsInLabels(labelNames, folderPath) 
return this

_________________________________________________________________________________________________________________________________________________




Story

    Title: Create Modular Azure Container Registry Terraform Building Blocks

Feature-Level Tickets

Ticket: ACR Creation and Configuration
        Description: Terraform module to create an ACR with desired SKU, network access settings (private or public), admin-enabled status, etc.
        Acceptance Criteria: Module successfully creates and configures ACRs according to provided parameters.

Ticket: ACR Authentication Integration
        Description: Mechanism for authenticating with ACR – Service Principal, Managed Identity, etc.
        Acceptance Criteria: Authentication works with build pipelines or other tools needing access.

main.tf:
variable "acr_name" {
  description = "Name of the Azure Container Registry"
}

# Choose ONE authentication method below. Comment out the unused one 

# **OPTION 1: Service Principal Authentication** 
variable "service_principal_id" {}
variable "service_principal_secret" {}

resource "azurerm_role_assignment" "acr_pull" {
  scope                = azurerm_container_registry.acr.id
  role_definition_name = "AcrPull"
  principal_id         = var.service_principal_id
}

# **OPTION 2: Managed Identity Authentication**
resource "azurerm_user_assigned_identity" "acr_identity" {
  resource_group_name = azurerm_resource_group.rg.name 
  location            = azurerm_resource_group.rg.location
  name                = "acr-managed-identity" 
}

resource "azurerm_role_assignment" "acr_pull_managed" {
  scope                = azurerm_container_registry.acr.id
  role_definition_name = "AcrPull"
  principal_id         = azurerm_user_assigned_identity.acr_identity.principal_id 
}

variable.tf

variable "acr_name" {} 

# Option 1: Service Principal variables
variable "service_principal_id" {
  sensitive = true
}
variable "service_principal_secret" {
  sensitive = true
}

outputs.tf

output "acr_id" {
  value = azurerm_container_registry.acr.id
}

# Depending on your chosen authentication method 
output "client_id" {
  value = # Service Principal ID OR Managed Identity ID
}

output "client_secret" {
  value = # Service Principal secret (if applicable)
  sensitive = true
}

********************
Ticket: ACR Image Tagging and Management
        Description: Enforce tagging conventions; potentially include cleanup of old image tags.
        Acceptance Criteria: Policy implementation verifiable in the ACR interface.

main.tf
# Tagging policy enforcement
resource "azurerm_container_registry_repository_policy" "tagging_policy" {
  resource_id = azurerm_container_registry.acr.id

  enabled = true

  rules {
    tag_status {
      status      = "enabled" 
      repository_regex = ".*"  # Apply to all repositories 
      tag_regex    = "^(latest|[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9]+)?)$"  # Example regex 
    }
  }
}

# Optional: Image cleanup policy
resource "azurerm_container_registry_repository_policy" "cleanup_policy" {
  resource_id = azurerm_container_registry.acr.id

  enabled = true  # Or set to 'false' to disable 

  rules {
    untagged_manifest_expiration {
      days = 7  # Keep untagged images for 7 days 
    }
  }
}

variables.tf

variable "acr_name" {}

# Variables for customizing the tagging regex 
variable "tagging_regex" {
  default = "^(latest|[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9]+)?)$"
}

# Variables for customizing the cleanup policy
variable "cleanup_enabled" {
  default = false
}

variable "cleanup_days" {
  default = 7
}

*******************************************************
g#!/usr/bin/env groovy
import hudson.model.Node
import hudson.model.Computer
import hudson.model.Label
import hudson.FilePath
import jenkins.model.Jenkins

// Method to check if any job is running on an agent
def isAnyJobRunningOnAgent(String agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    return computer?.executors.any { it.isBusy() } 
}

// Method to list and clean a folder on an agent within a label
def listAndCleanFolderOnAgent(String agentName, String folderPath) {
    if (!isAnyJobRunningOnAgent(agentName)) {
        println "Listing contents of $folderPath on agent: $agentName"
        def folderToClean = new FilePath(Jenkins.instance.getComputer(agentName).channel, folderPath)
        folderToClean.list().each { file -> println file }

        println "Cleaning $folderPath on agent: $agentName"
        folderToClean.deleteContents()
    } else {
        println "Skipping cleaning on agent $agentName as a job is running on it"
    }
}

// Main execution 
def listAndCleanFolderOnAgentsInLabels(String labelNames, String folderPath) {
  	List<String> labels = labelNames.split(',')
    Jenkins.instance.getNodes().each { node ->
        if (node.getAssignedLabels().any { it.getName() in labelNames }) {
            listAndCleanFolderOnAgent(node.getNodeName(), folderPath)
        }
    }
    return true
}

// Execute the process
listAndCleanFolderOnAgentsInLabels(labelNames, folderPath) 
return this

*********************
   List<String> labels = labelNames.split(',')
   int cleanedCaches = 0 // Counter for cleaned caches
   int agentsProcessed = 0 // Counter for processed agents

   Jenkins.instance.getNodes().each { node ->
      if (node.getAssignedLabels().any { it.getName() in labelNames }) {
         agentsProcessed++
         if (listAndCleanFolderOnAgent(node.getNodeName(), folderPath)) {
            cleanedCaches++ 
         }
      }
   }
   println("Cleaned ${cleanedCaches} gradle caches from ${agentsProcessed} agents")
   return true
}

----------------------------------------
def listAndCleanFolderOnAgent(String agentName, String folderPath) {
  if (!isAnyJobRunningOnAgent(agentName)) {
    println "Checking $folderPath on agent: $agentName" 
    def folderToClean = new FilePath(Jenkins.instance.getComputer(agentName).channel, folderPath)

    // Check if the folder exists and has contents
    if (folderToClean.exists() && folderToClean.list().size() > 0) { 
      println "Cleaning $folderPath on agent: $agentName"
      folderToClean.list().each { file -> println file } // Optional: Log files being deleted
      folderToClean.deleteContents()
      return true // Indicate successful cleaning and content presence
    } else {
      println "$folderPath on agent $agentName is empty or doesn't exist. Skipping cleaning."
      return false  // Indicate no cleaning        
    }
  } else {
    println "Skipping cleaning on agent $agentName as a job is running on it"
    return false // Indicate skipped cleaning 
  }
}

// Main execution 
def listAndCleanFolderOnAgentsInLabels(String labelNames, String folderPath) {
  List<String> labels = labelNames.split(',')
  int cleanedCaches = 0 // Counter for cleaned caches
  int agentsProcessed = 0 // Counter for processed agents

  Jenkins.instance.getNodes().each { node ->
    if (node.getAssignedLabels().any { it.getName() in labelNames }) {
      agentsProcessed++
      if (listAndCleanFolderOnAgent(node.getNodeName(), folderPath)) {
        cleanedCaches++ 
      }
    }
  }

  // Print metrics only once
  println("Cleaned ${cleanedCaches} gradle caches from ${agentsProcessed} agents")  
  return true
}

*********************************************************************************************************************

ACR_AUTH
main.tf

# Managed Identity Authentication
resource "azurerm_user_assigned_identity" "acr_identity" {
  resource_group_name = azurerm_resource_group.rg.name 
  location            = azurerm_resource_group.rg.location
  name                = "acr-managed-identity" 

  # Activate only if authentication_method is 'managed_identity'
  count = var.authentication_method == "managed_identity" ? 1 : 0
}

# Role Assignment (dynamic selection)
resource "azurerm_role_assignment" "acr_pull" {
  scope                = azurerm_container_registry.acr.id
  role_definition_name = "AcrPull"

  # Conditional based on authentication_method
  principal_id = var.authentication_method == "service_principal" ? 
                     var.service_principal_id : 
                     azurerm_user_assigned_identity.acr_identity.principal_id 

  # Activate only if authentication_method is 'managed_identity'
  count = var.authentication_method == "managed_identity" ? 1 : 0
}


variables.tf

variable "acr_name" {
  description = "Name of the Azure Container Registry"
}

variable "authentication_method" {
  type        = string
  default     = "service_principal"  
  description = "Choose authentication method: 'service_principal' or 'managed_identity'"
}

variable "service_principal_id" {
  sensitive = true
}
variable "service_principal_secret" {
  sensitive = true
}


outputs.tf

output "acr_login_server" {
  value = azurerm_container_registry.acr.login_server
}
output "acr_id" {
  value = azurerm_container_registry.acr.id
}

# Depending on your chosen authentication method 
output "client_id" {
  value = # Service Principal ID OR Managed Identity ID
}

output "client_secret" {
  value = # Service Principal secret (if applicable)
  sensitive = true
}

***************************************************************************************************************************

aks

module "aks" {
  source              = "terraform-azurerm-aks"
  resource_group_name = var.resource_group_name
  cluster_name        = var.cluster_name
  location            = var.location
  node_count          = var.node_count
  node_vm_size        = var.node_vm_size
}


variables.tf:

variable "resource_group_name" {
  description = "Name of the Azure resource group"
}

variable "cluster_name" {
  description = "Name of the AKS cluster"
}

variable "location" {
  description = "Azure region where resources will be deployed"
}

variable "node_count" {
  description = "Number of nodes in the AKS cluster"
  default     = 3
}

variable "node_vm_size" {
  description = "Size of the VMs in the AKS cluster nodes"
  default     = "Standard_DS2_v2"
}

outputs.tf:

output "kube_config" {
  description = "Kubernetes configuration for accessing the AKS cluster"
  value       = module.aks.kube_config
}

*** This can be implemented further ***

***************************************************************

address_space = ["10.229.192.0/20"]

subnet_prefixes = ["10.229.192.0/24", "10.229.198.0/24"]

route_table = {
  "security-group" = {
    disableBgpRoutePropagation = false
    routes = [
      {
        name             = "default-udr"
        addressPrefix    = "0.0.0.0/0"
        nextHopType      = "VirtualAppliance"
        nextHopIpAddress = "10.231.10.100"
      },
      {
        name             = "network-146.189.0.0-16-udr"
        addressPrefix    = "146.189.0.0/16"
        nextHopType      = "VirtualAppliance"
        nextHopIpAddress = "10.231.10.200"
      }
    ]
  }
}

*****************************************************************************


Join Zoom Meeting
https://us05web.zoom.us/j/4875485862?pwd=QitpclhtZDlsNjJVSVM2SmNST0FqZz09



