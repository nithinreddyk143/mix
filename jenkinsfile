import hudson.model.*

def labelName = "your-label" // Label name containing a group of agents to clean

def isAnyJobRunningOnAgent(agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    if (computer != null) {
        for (executor in computer.executors) {
            if (executor.isBusy()) {
                return true
            }
        }
    }
    return false
}

def getAgentsInLabel(labelName) {
    def agentsInLabel = []
    def nodes = Jenkins.instance.getNodes()
    nodes.each { node ->
        if (node.getAssignedLabels().find { it.getName() == labelName }) {
            agentsInLabel.add(node.getNodeName())
        }
    }
    return agentsInLabel
}

def getFreeAgentsInLabel(labelName) {
    def freeAgentsInLabel = []
    def agentsInLabel = getAgentsInLabel(labelName)
    agentsInLabel.each { agentName ->
        if (!isAnyJobRunningOnAgent(agentName)) {
            freeAgentsInLabel.add(agentName)
        }
    }
    return freeAgentsInLabel
}

def cleanFolderOnAgentsInLabel(labelName) {
    def freeAgentsInLabel = getFreeAgentsInLabel(labelName)
    println "Free agents in label $labelName for cleaning: $freeAgentsInLabel"
    
    freeAgentsInLabel.each { agentName ->
        println "Cleaning folder on agent: $agentName"
        // Add your folder removal logic here for the specified agent
    }
}

cleanFolderOnAgentsInLabel(labelName)


*******************************************************************************

def isAnyJobRunningOnAgent(agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    if (computer != null) {
        for (executor in computer.executors) {
            if (executor.isBusy()) {
                return true
            }
        }
    }
    return false
}

def getAgentsInLabels(labelNames) {
    def agentsInLabels = []
    def nodes = Jenkins.instance.getNodes()
    nodes.each { node ->
        labelNames.each { labelName ->
            if (node.getAssignedLabels().find { it.getName() == labelName }) {
                agentsInLabels.add(node.getNodeName())
            }
        }
    }
    return agentsInLabels
}

def getFreeAgentsInLabels(labelNames) {
    def freeAgentsInLabels = []
    def agentsInLabels = getAgentsInLabels(labelNames)
    agentsInLabels.each { agentName ->
        if (!isAnyJobRunningOnAgent(agentName)) {
            freeAgentsInLabels.add(agentName)
        }
    }
    return freeAgentsInLabels
}

def cleanFolderOnAgentsInLabels(labelNames) {
    def freeAgentsInLabels = getFreeAgentsInLabels(labelNames)
    println "Free agents in labels $labelNames for cleaning: $freeAgentsInLabels"
    
    freeAgentsInLabels.each { agentName ->
        println "Cleaning folder on agent: $agentName"
        // Add your folder removal logic here for the specified agent
    }
}

def labelNames = ["label1", "label2"] // Replace with your label names
cleanFolderOnAgentsInLabels(labelNames)
****************************************************************************************
import hudson.model.*
import hudson.FilePath

def isAnyJobRunningOnAgent(agentName) {
    def computer = Jenkins.instance.getComputer(agentName)
    if (computer != null) {
        for (executor in computer.executors) {
            if (executor.isBusy()) {
                return true
            }
        }
    }
    return false
}

def listAndCleanFolderOnAgentsInLabels(labelNames) {
    def nodes = Jenkins.instance.getNodes()
    labelNames.each { labelName ->
        nodes.each { node ->
            if (node.getAssignedLabels().find { it.getName() == labelName }) {
                def agentName = node.getNodeName()
                if (!isAnyJobRunningOnAgent(agentName)) {
                    println "Listing contents of /data/gradle/caches on agent: $agentName"
                    def workspacePath = new FilePath(Jenkins.instance.getComputer(agentName).channel, "/data/gradle/caches")
                    workspacePath.list().each { file ->
                        println file
                    }
                    println "Cleaning /data/gradle/caches folder on agent: $agentName"
                    workspacePath.deleteContents()
                } else {
                    println "Skipping cleaning on agent $agentName as a job is running on it"
                }
            }
        }
    }
}

def labelNames = ["label1", "label2"] // Replace with your label names
listAndCleanFolderOnAgentsInLabels(labelNames)

